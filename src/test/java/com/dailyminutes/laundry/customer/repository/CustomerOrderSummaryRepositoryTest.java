package com.dailyminutes.laundry.customer.repository;

import com.dailyminutes.DailyminutesApplication;
import com.dailyminutes.laundry.customer.domain.model.CustomerEntity;
import com.dailyminutes.laundry.customer.domain.model.CustomerOrderSummaryEntity;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.jdbc.DataJdbcTest;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * The type Customer order summary repository test.
 */
@DataJdbcTest(excludeAutoConfiguration = DailyminutesApplication.class)
@AutoConfigureTestDatabase(replace = Replace.NONE)
@EnableJdbcRepositories(basePackages = {"com.dailyminutes.laundry.customer.repository"
})
@ComponentScan(basePackages = {"com.dailyminutes.laundry.customer.domain.model"})
class CustomerOrderSummaryRepositoryTest {

    @Autowired
    private CustomerOrderSummaryRepository customerOrderSummaryRepository;
    @Autowired
    private CustomerRepository customerRepository;


    /**
     * Test save and find customer order summary.
     */
    @Test
    void testSaveAndFindCustomerOrderSummary() {
        // ID is null as it will be auto-generated by the database
        CustomerEntity customer = customerRepository.save(new CustomerEntity(null, "SUB123", "9876543210", "Jane Doe", "jane@example.com"));
        CustomerOrderSummaryEntity summary = new CustomerOrderSummaryEntity(
                null, 10l, customer.getId(), LocalDateTime.now(), "PENDING", new BigDecimal("50.00"), 10l);
        CustomerOrderSummaryEntity savedSummary = customerOrderSummaryRepository.save(summary);

        assertThat(savedSummary).isNotNull();
        assertThat(savedSummary.getId()).isNotNull(); // Assert that ID is now generated
        assertThat(savedSummary.getOrderId()).isEqualTo(10l);
        assertThat(savedSummary.getCustomerId()).isEqualTo(customer.getId());

        Optional<CustomerOrderSummaryEntity> foundSummary = customerOrderSummaryRepository.findById(savedSummary.getId());
        assertThat(foundSummary).isPresent();
        assertThat(foundSummary.get().getStatus()).isEqualTo("PENDING");
        assertThat(foundSummary.get().getTotalAmount()).isEqualByComparingTo("50.00");
    }

    /**
     * Test update customer order summary.
     */
    @Test
    void testUpdateCustomerOrderSummary() {
        CustomerEntity customer = customerRepository.save(new CustomerEntity(null, "SUB123", "9876543210", "Jane Doe", "jane@example.com"));
        CustomerOrderSummaryEntity summary = new CustomerOrderSummaryEntity(
                null, 10l, customer.getId(), LocalDateTime.now(), "ACCEPTED", new BigDecimal("75.00"), 10l);
        CustomerOrderSummaryEntity savedSummary = customerOrderSummaryRepository.save(summary);

        savedSummary.setStatus("DELIVERED");
        savedSummary.setTotalAmount(new BigDecimal("70.00"));
        customerOrderSummaryRepository.save(savedSummary);

        Optional<CustomerOrderSummaryEntity> updatedSummary = customerOrderSummaryRepository.findById(savedSummary.getId());
        assertThat(updatedSummary).isPresent();
        assertThat(updatedSummary.get().getStatus()).isEqualTo("DELIVERED");
        assertThat(updatedSummary.get().getTotalAmount()).isEqualByComparingTo("70.00");
    }

    /**
     * Test delete customer order summary.
     */
    @Test
    void testDeleteCustomerOrderSummary() {
        CustomerEntity customer = customerRepository.save(new CustomerEntity(null, "SUB123", "9876543210", "Jane Doe", "jane@example.com"));
        CustomerOrderSummaryEntity summary = new CustomerOrderSummaryEntity(
                null, 10l, customer.getId(), LocalDateTime.now(), "CANCELLED", new BigDecimal("20.00"), 10l);
        CustomerOrderSummaryEntity savedSummary = customerOrderSummaryRepository.save(summary);

        customerOrderSummaryRepository.deleteById(savedSummary.getId());
        Optional<CustomerOrderSummaryEntity> deletedSummary = customerOrderSummaryRepository.findById(savedSummary.getId());
        assertThat(deletedSummary).isNotPresent();
    }

    /**
     * Test find by customer id.
     */
    @Test
    void testFindByCustomerId() {
        CustomerEntity customer1 = customerRepository.save(new CustomerEntity(null, "SUB123", "9876543210", "Jane Doe", "jane@example.com"));
        CustomerEntity customer2 = customerRepository.save(new CustomerEntity(null, "SUB124", "3453453454", "Jane Doe", "jane@example.com"));
        customerOrderSummaryRepository.save(new CustomerOrderSummaryEntity(null, 10l, customer1.getId(), LocalDateTime.now(), "PENDING", new BigDecimal("10.00"), 10l));
        customerOrderSummaryRepository.save(new CustomerOrderSummaryEntity(null, 20l, customer1.getId(), LocalDateTime.now(), "DELIVERED", new BigDecimal("25.00"), 20l));
        customerOrderSummaryRepository.save(new CustomerOrderSummaryEntity(null, 30l, customer2.getId(), LocalDateTime.now(), "NEW", new BigDecimal("30.00"), 30l));

        List<CustomerOrderSummaryEntity> ordersForCustomer10 = customerOrderSummaryRepository.findByCustomerId(customer1.getId());
        assertThat(ordersForCustomer10).hasSize(2);
        assertThat(ordersForCustomer10.stream().allMatch(s -> s.getCustomerId().equals(customer1.getId()))).isTrue();
    }

    /**
     * Test find by status.
     */
    @Test
    void testFindByStatus() {
        CustomerEntity customer1=customerRepository.save(new CustomerEntity(null, "SUB1234", "8787678687", "Jane Doe", "jane@example.com"));
        CustomerEntity customer2=customerRepository.save(new CustomerEntity(null, "SUB1235", "7687687687", "Jane Doe", "jane@example.com"));
        CustomerEntity customer3=customerRepository.save(new CustomerEntity(null, "SUB1236", "7688787687", "Jane Doe", "jane@example.com"));
        customerOrderSummaryRepository.save(new CustomerOrderSummaryEntity(null, 10l, customer1.getId(), LocalDateTime.now(), "NEW", new BigDecimal("15.00"), 10l));
        customerOrderSummaryRepository.save(new CustomerOrderSummaryEntity(null, 20l, customer2.getId(), LocalDateTime.now(), "NEW", new BigDecimal("18.00"), 10l));
        customerOrderSummaryRepository.save(new CustomerOrderSummaryEntity(null, 30l, customer3.getId(), LocalDateTime.now(), "ACCEPTED", new BigDecimal("22.00"), 10l));

        List<CustomerOrderSummaryEntity> newOrders = customerOrderSummaryRepository.findByStatus("NEW");
        assertThat(newOrders).hasSize(2);
        assertThat(newOrders.stream().allMatch(s -> s.getStatus().equals("NEW"))).isTrue();
    }

    /**
     * Test find by store id.
     */
    @Test
    void testFindByStoreId() {
        CustomerEntity customer1=customerRepository.save(new CustomerEntity(null, "SUB1234", "8787678687", "Jane Doe", "jane@example.com"));
        CustomerEntity customer2=customerRepository.save(new CustomerEntity(null, "SUB1235", "7687687687", "Jane Doe", "jane@example.com"));
        CustomerEntity customer3=customerRepository.save(new CustomerEntity(null, "SUB1236", "7688787687", "Jane Doe", "jane@example.com"));
        customerOrderSummaryRepository.save(new CustomerOrderSummaryEntity(null, 10l, customer1.getId(), LocalDateTime.now(), "PENDING", new BigDecimal("100.00"), 10l));
        customerOrderSummaryRepository.save(new CustomerOrderSummaryEntity(null, 20l, customer2.getId(), LocalDateTime.now(), "DELIVERED", new BigDecimal("120.00"), 10l));
        customerOrderSummaryRepository.save(new CustomerOrderSummaryEntity(null, 30l, customer3.getId(), LocalDateTime.now(), "ACCEPTED", new BigDecimal("80.00"), 10l));

        List<CustomerOrderSummaryEntity> ordersForStore40 = customerOrderSummaryRepository.findByStoreId(10l);
        assertThat(ordersForStore40).hasSize(3);
        assertThat(ordersForStore40.stream().allMatch(s -> s.getStoreId().equals(10l))).isTrue();
    }

    /**
     * Test find by order id.
     */
    @Test
    void testFindByOrderId() {
        CustomerEntity customer1=customerRepository.save(new CustomerEntity(null, "SUB1234", "8787678687", "Jane Doe", "jane@example.com"));
        CustomerEntity customer2=customerRepository.save(new CustomerEntity(null, "SUB1235", "7687687687", "Jane Doe", "jane@example.com"));
        customerOrderSummaryRepository.save(new CustomerOrderSummaryEntity(null, 10l, customer1.getId(), LocalDateTime.now(), "PENDING", new BigDecimal("60.00"), 10l));
        customerOrderSummaryRepository.save(new CustomerOrderSummaryEntity(null, 20l, customer2.getId(), LocalDateTime.now(), "DELIVERED", new BigDecimal("70.00"), 10l));

        Optional<CustomerOrderSummaryEntity> foundSummary = customerOrderSummaryRepository.findByOrderId(10l);
        assertThat(foundSummary).isPresent();
        assertThat(foundSummary.get().getCustomerId()).isEqualTo(customer1.getId());
    }
}
