package com.chitchatfm.dailyminutes.laundry.store.repository;

import com.chitchatfm.dailyminutes.laundry.store.domain.model.StoreEntity;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.jdbc.DataJdbcTest; // Correct annotation for JDBC tests
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.context.annotation.ComponentScan; // Required for scanning domain models
import org.springframework.data.jdbc.repository.config.EnableJdbcRepositories; // Required to enable JDBC repositories

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@DataJdbcTest
@AutoConfigureTestDatabase(replace = Replace.NONE)
@EnableJdbcRepositories(basePackages = "com.chitchatfm.dailyminutes.laundry.store.repository") // Point to your repository package
@ComponentScan(basePackages = "com.chitchatfm.dailyminutes.laundry.store.domain.model") // Point to your domain model package
class StoreRepositoryTest {

    @Autowired
    private StoreRepository storeRepository;

    @Test
    void testSaveAndFindStore() {
        // ID is null as it will be auto-generated by the database
        StoreEntity store = new StoreEntity(null, "Test Store", "123 Main St", "123-456-7890", "test@example.com", 10L);
        StoreEntity savedStore = storeRepository.save(store);

        assertThat(savedStore).isNotNull();
        assertThat(savedStore.getId()).isNotNull(); // Assert that the ID has been generated

        Optional<StoreEntity> foundStore = storeRepository.findById(savedStore.getId());
        assertThat(foundStore).isPresent();
        assertThat(foundStore.get().getName()).isEqualTo("Test Store");
        assertThat(foundStore.get().getManagerId()).isEqualTo(10L);
    }

    @Test
    void testFindAllStores() {
        storeRepository.save(new StoreEntity(null, "Store A", "Address A", "111", "a@example.com", 1L));
        storeRepository.save(new StoreEntity(null, "Store B", "Address B", "222", "b@example.com", 2L));

        // CrudRepository's findAll() returns an Iterable, cast to List for easier assertions
        List<StoreEntity> stores = (List<StoreEntity>) storeRepository.findAll();
        assertThat(stores).hasSize(2);
        assertThat(stores.stream().map(StoreEntity::getName)).containsExactlyInAnyOrder("Store A", "Store B");
    }

    @Test
    void testUpdateStore() {
        StoreEntity store = new StoreEntity(null, "Store to Update", "Update Address", "333", "update@example.com", 3L);
        StoreEntity savedStore = storeRepository.save(store);

        // Modify the saved entity
        savedStore.setEmail("updated.email@example.com");
        savedStore.setManagerId(4L);
        StoreEntity updatedStore = storeRepository.save(savedStore); // Save the updated entity

        Optional<StoreEntity> foundUpdatedStore = storeRepository.findById(updatedStore.getId());
        assertThat(foundUpdatedStore).isPresent();
        assertThat(foundUpdatedStore.get().getEmail()).isEqualTo("updated.email@example.com");
        assertThat(foundUpdatedStore.get().getManagerId()).isEqualTo(4L);
    }

    @Test
    void testDeleteStore() {
        StoreEntity store = new StoreEntity(null, "Store to Delete", "Delete Address", "333", "delete@example.com", 5L);
        StoreEntity savedStore = storeRepository.save(store);

        storeRepository.deleteById(savedStore.getId()); // Delete by ID
        Optional<StoreEntity> foundStore = storeRepository.findById(savedStore.getId());
        assertThat(foundStore).isNotPresent(); // Assert it's no longer present
    }

    @Test
    void testFindByName() {
        storeRepository.save(new StoreEntity(null, "Unique Store C", "Address C", "444", "c@example.com", 5L));
        Optional<StoreEntity> foundStore = storeRepository.findByName("Unique Store C");
        assertThat(foundStore).isPresent();
        assertThat(foundStore.get().getAddress()).isEqualTo("Address C");
    }

    @Test
    void testFindByManagerId() {
        storeRepository.save(new StoreEntity(null, "Manager Store X", "Address X", "555", "x@example.com", 100L));
        storeRepository.save(new StoreEntity(null, "Manager Store Y", "Address Y", "666", "y@example.com", 100L));
        storeRepository.save(new StoreEntity(null, "Manager Store Z", "Address Z", "777", "z@example.com", 101L));

        List<StoreEntity> stores = storeRepository.findByManagerId(100L);
        assertThat(stores).hasSize(2);
        assertThat(stores.stream().map(StoreEntity::getName)).containsExactlyInAnyOrder("Manager Store X", "Manager Store Y");
    }
}
