package com.chitchatfm.dailyminutes.laundry.customer.repository;

import com.chitchatfm.dailyminutes.laundry.customer.domain.model.CustomerEntity;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.jdbc.DataJdbcTest;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.data.jdbc.repository.config.EnableJdbcRepositories;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@DataJdbcTest
@AutoConfigureTestDatabase(replace = Replace.NONE)
@EnableJdbcRepositories(basePackages = "com.chitchatfm.dailyminutes.laundry.customer.repository")
@ComponentScan(basePackages = "com.chitchatfm.dailyminutes.laundry.customer.domain.model")
class CustomerRepositoryTest {

    @Autowired
    private CustomerRepository customerRepository;

    @Test
    void testSaveAndFindCustomer() {
        // Pass null for ID, as it's auto-generated by the database
        CustomerEntity customer = new CustomerEntity(null, "SUB123", "9876543210", "Jane Doe", "jane@example.com", "101 Elm St, Springfield, IL", "GEOFENCE_HOME_1", "12.345", "67.890");
        CustomerEntity savedCustomer = customerRepository.save(customer);

        assertThat(savedCustomer).isNotNull();
        assertThat(savedCustomer.getId()).isNotNull(); // Assert that ID is now generated

        Optional<CustomerEntity> foundCustomer = customerRepository.findById(savedCustomer.getId());
        assertThat(foundCustomer).isPresent();
        assertThat(foundCustomer.get().getName()).isEqualTo("Jane Doe");
        assertThat(foundCustomer.get().getSubscriberId()).isEqualTo("SUB123");
        assertThat(foundCustomer.get().getPhoneNumber()).isEqualTo("9876543210");
        assertThat(foundCustomer.get().getHomeGeofenceId()).isEqualTo("GEOFENCE_HOME_1");
        assertThat(foundCustomer.get().getAddressLongitude()).isEqualTo("12.345");
        assertThat(foundCustomer.get().getAddressLatitude()).isEqualTo("67.890");
    }

    @Test
    void testUpdateCustomer() {
        CustomerEntity customer = new CustomerEntity(null, "SUB456", "1112223333", "John Smith", "john@example.com", "200 Oak Ave, Metropolis, NY", "GEOFENCE_HOME_2", "11.111", "22.222");
        CustomerEntity savedCustomer = customerRepository.save(customer); // Save to get generated ID

        CustomerEntity foundCustomer = customerRepository.findById(savedCustomer.getId()).orElseThrow();
        foundCustomer.setEmail("john.new@example.com");
        foundCustomer.setAddress("300 Pine St, New City, CA");
        customerRepository.save(foundCustomer);

        Optional<CustomerEntity> updatedCustomer = customerRepository.findById(savedCustomer.getId());
        assertThat(updatedCustomer).isPresent();
        assertThat(updatedCustomer.get().getEmail()).isEqualTo("john.new@example.com");
        assertThat(updatedCustomer.get().getAddress()).isEqualTo("300 Pine St, New City, CA");
    }

    @Test
    void testDeleteCustomer() {
        CustomerEntity customer = new CustomerEntity(null, "SUB789", "4445556666", "Test Delete", "delete@example.com", "500 Pine Ln, Anytown, CA", "GEOFENCE_HOME_3", "33.333", "44.444");
        CustomerEntity savedCustomer = customerRepository.save(customer); // Save to get generated ID

        customerRepository.deleteById(savedCustomer.getId());
        Optional<CustomerEntity> deletedCustomer = customerRepository.findById(savedCustomer.getId());
        assertThat(deletedCustomer).isNotPresent();
    }

    @Test
    void testFindBySubscriberId() {
        CustomerEntity customer1 = new CustomerEntity(null, "SUB_A", "7778889999", "Customer A", "a@test.com", "Address A", "GEOFENCE_A", "1.0", "2.0");
        CustomerEntity customer2 = new CustomerEntity(null, "SUB_B", "0001112222", "Customer B", "b@test.com", "Address B", "GEOFENCE_B", "3.0", "4.0");
        customerRepository.save(customer1);
        customerRepository.save(customer2);

        Optional<CustomerEntity> foundCustomer = customerRepository.findBySubscriberId("SUB_A");
        assertThat(foundCustomer).isPresent();
        assertThat(foundCustomer.get().getName()).isEqualTo("Customer A");
    }

    @Test
    void testFindByEmail() {
        CustomerEntity customer1 = new CustomerEntity(null, "SUB_C", "5556667777", "Customer C", "c@test.com", "Address C", "GEOFENCE_C", "5.0", "6.0");
        CustomerEntity customer2 = new CustomerEntity(null, "SUB_D", "8889990000", "Customer D", "d@test.com", "d@test.com", "GEOFENCE_D", "7.0", "8.0");
        customerRepository.save(customer1);
        customerRepository.save(customer2);

        Optional<CustomerEntity> foundCustomer = customerRepository.findByEmail("c@test.com");
        assertThat(foundCustomer).isPresent();
        assertThat(foundCustomer.get().getName()).isEqualTo("Customer C");
    }

    @Test
    void testFindByPhoneNumber() {
        CustomerEntity customer1 = new CustomerEntity(null, "SUB_E", "9998887777", "Customer E", "e@test.com", "Address E", "GEOFENCE_E", "9.0", "10.0");
        CustomerEntity customer2 = new CustomerEntity(null, "SUB_F", "6665554444", "Customer F", "f@test.com", "Address F", "GEOFENCE_F", "11.0", "12.0");
        customerRepository.save(customer1);
        customerRepository.save(customer2);

        Optional<CustomerEntity> foundCustomer = customerRepository.findByPhoneNumber("9998887777");
        assertThat(foundCustomer).isPresent();
        assertThat(foundCustomer.get().getName()).isEqualTo("Customer E");
    }
}
