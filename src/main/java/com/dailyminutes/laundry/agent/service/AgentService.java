/**
 * @author Somendra Datta <sodatta@gmail.com>
 * @version 17/07/25
 */
package com.dailyminutes.laundry.agent.service;

import com.dailyminutes.laundry.agent.domain.model.AgentEntity;
import com.dailyminutes.laundry.agent.domain.event.AgentAssignedToTeamEvent;
import com.dailyminutes.laundry.agent.domain.event.AgentCreatedEvent;
import com.dailyminutes.laundry.agent.domain.event.AgentDeletedEvent;
import com.dailyminutes.laundry.agent.domain.event.AgentUpdatedEvent;
import com.dailyminutes.laundry.agent.repository.AgentRepository;
import com.dailyminutes.laundry.agent.dto.CreateAgentRequest;
import com.dailyminutes.laundry.agent.dto.UpdateAgentRequest;
import com.dailyminutes.laundry.agent.dto.AgentResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author Somendra Datta <sodatta@example.com>
 * @version 12/07/25
 */
/**
 * Service for managing Agent entities.
 * This is the command-side service, responsible for creating, updating, and deleting agents,
 * and publishing domain events.
 */
@Service
@RequiredArgsConstructor // Lombok annotation for constructor injection of final fields
@Transactional // Ensures atomicity of operations
public class AgentService {

    private final AgentRepository agentRepository;
    private final ApplicationEventPublisher events; // For publishing domain events

    /**
     * Creates a new agent and publishes an AgentCreatedEvent.
     *
     * @param request The DTO containing data for the new agent.
     * @return The response DTO of the created agent.
     * @throws IllegalArgumentException if an agent with the same unique ID or phone number already exists.
     */
    public AgentResponse createAgent(CreateAgentRequest request) {
        // Check for uniqueness of phoneNumber and uniqueId before saving
        agentRepository.findByPhoneNumber(request.phoneNumber()).ifPresent(agent -> {
            throw new IllegalArgumentException("Agent with phone number " + request.phoneNumber() + " already exists.");
        });
        agentRepository.findByUniqueId(request.uniqueId()).ifPresent(agent -> {
            throw new IllegalArgumentException("Agent with unique ID " + request.uniqueId() + " already exists.");
        });

        AgentEntity agent = new AgentEntity(
                null, // ID will be generated by the database
                request.name(),
                request.state(),
                request.teamId(),
                request.phoneNumber(),
                request.uniqueId(),
                request.joiningDate(),
                null, // terminationDate is null on creation
                request.designation()
        );

        AgentEntity savedAgent = agentRepository.save(agent);

        // Publish AgentCreatedEvent
        events.publishEvent(new AgentCreatedEvent(
                savedAgent.getId(),
                savedAgent.getName(),
                savedAgent.getState(),
                savedAgent.getTeamId(),
                savedAgent.getPhoneNumber(),
                savedAgent.getUniqueId(),
                savedAgent.getJoiningDate(),
                savedAgent.getDesignation()
        ));

        return toAgentResponse(savedAgent);
    }

    /**
     * Updates an existing agent and publishes an AgentUpdatedEvent.
     * If the teamId changes, an AgentAssignedToTeamEvent is also published.
     *
     * @param request The DTO containing updated data for the agent.
     * @return The response DTO of the updated agent.
     * @throws IllegalArgumentException if the agent with the given ID is not found.
     */
    public AgentResponse updateAgent(UpdateAgentRequest request) {
        AgentEntity existingAgent = agentRepository.findById(request.id())
                .orElseThrow(() -> new IllegalArgumentException("Agent with ID " + request.id() + " not found."));

        // Check for uniqueness of phoneNumber and uniqueId if they are changed to a different agent's values
        if (!existingAgent.getPhoneNumber().equals(request.phoneNumber())) {
            agentRepository.findByPhoneNumber(request.phoneNumber()).ifPresent(agent -> {
                if (!agent.getId().equals(request.id())) { // Ensure it's not the same agent
                    throw new IllegalArgumentException("Agent with phone number " + request.phoneNumber() + " already exists for another agent.");
                }
            });
        }
        if (!existingAgent.getUniqueId().equals(request.uniqueId())) {
            agentRepository.findByUniqueId(request.uniqueId()).ifPresent(agent -> {
                if (!agent.getId().equals(request.id())) { // Ensure it's not the same agent
                    throw new IllegalArgumentException("Agent with unique ID " + request.uniqueId() + " already exists for another agent.");
                }
            });
        }

        Long oldTeamId = existingAgent.getTeamId();

        // Update fields
        existingAgent.setName(request.name());
        existingAgent.setState(request.state());
        existingAgent.setTeamId(request.teamId());
        existingAgent.setPhoneNumber(request.phoneNumber());
        existingAgent.setUniqueId(request.uniqueId());
        existingAgent.setJoiningDate(request.joiningDate());
        existingAgent.setTerminationDate(request.terminationDate());
        existingAgent.setDesignation(request.designation());

        AgentEntity updatedAgent = agentRepository.save(existingAgent);

        // Publish AgentUpdatedEvent
        events.publishEvent(new AgentUpdatedEvent(
                updatedAgent.getId(),
                updatedAgent.getName(),
                updatedAgent.getState(),
                updatedAgent.getTeamId(),
                updatedAgent.getPhoneNumber(),
                updatedAgent.getUniqueId(),
                updatedAgent.getJoiningDate(),
                updatedAgent.getTerminationDate(),
                updatedAgent.getDesignation()
        ));

        // Publish AgentAssignedToTeamEvent if teamId changed
        if (!java.util.Objects.equals(oldTeamId, updatedAgent.getTeamId())) {
            events.publishEvent(new AgentAssignedToTeamEvent(
                    updatedAgent.getId(),
                    updatedAgent.getTeamId()
            ));
        }

        return toAgentResponse(updatedAgent);
    }

    /**
     * Deletes an agent by ID and publishes an AgentDeletedEvent.
     *
     * @param id The ID of the agent to delete.
     * @throws IllegalArgumentException if the agent with the given ID is not found.
     */
    public void deleteAgent(Long id) {
        if (!agentRepository.existsById(id)) {
            throw new IllegalArgumentException("Agent with ID " + id + " not found.");
        }
        agentRepository.deleteById(id);
        // Publish AgentDeletedEvent
        events.publishEvent(new AgentDeletedEvent(id));
    }

    /**
     * Helper method to convert AgentEntity to AgentResponse DTO.
     *
     * @param agentEntity The AgentEntity to convert.
     * @return The corresponding AgentResponse DTO.
     */
    private AgentResponse toAgentResponse(AgentEntity agentEntity) {
        return new AgentResponse(
                agentEntity.getId(),
                agentEntity.getName(),
                agentEntity.getState(),
                agentEntity.getTeamId(),
                agentEntity.getPhoneNumber(),
                agentEntity.getUniqueId(),
                agentEntity.getJoiningDate(),
                agentEntity.getTerminationDate(),
                agentEntity.getDesignation()
        );
    }
}
